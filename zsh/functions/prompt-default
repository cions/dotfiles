#!/bin/zsh

(( ${+commands[powerprompt]} )) || return 1
(( ${+functions[async_start_worker]} )) || return 1

_prompt_function() {
    local _status=${argv[1]:-${status}}
    local segments=()

    (( _status != 0 )) && segments+=( "red:${_status}" )
    (( ${(%):-%j} != 0 )) && segments+=( "orange:%j" )

    case ${KEYMAP} in
        (viins|main) segments+=( "cyan:INSERT" ) ;;
        (vicmd)      segments+=( "red:NORMAL" ) ;;
    esac

    if (( EUID == 0 )); then
        segments+=( "magenta:%n" )
    else
        segments+=( "green:%n" )
    fi
    (( ${+SSH_CONNECTION} )) && segments+=( "yellow:%M" )
    segments+=( "gray3:%1~" )
    PROMPT="$(powerprompt -f zsh -L -- "${segments[@]}") "

    local width=${(%)#PROMPT}
    segments=()
    case ${KEYMAP} in
        (viins|main) segments+=( "cyan:INSERT" ) ;;
        (vicmd)      segments+=( "red:NORMAL" ) ;;
    esac
    segments+=( "gray3:%$((width-13))<<${(l:width-13:)}%1_%<<" )
    PROMPT2="$(powerprompt -f zsh -L -- "${segments[@]}") "

    zle reset-prompt
}

_rprompt() {
    local workdir=${PWD}
    [[ ${workdir} == ${HOME} ]] && workdir=${DOTFILES}
    RPROMPT=""
    async_job rprompt_worker _rprompt_async ${workdir}
}

_rprompt_async() {
    local workdir=${argv[1]}
    local segments=()

    cd -q ${workdir} 2>/dev/null || return 1
    git-info || return 1

    if (( gitstate[head_detached] )); then
        segments+=( "yellow:${gitstate[head_name]}" )
    else
        segments+=( "green:${gitstate[head_name]}" )
    fi

    if [[ -n ${gitstate[state]} ]]; then
        local state="${gitstate[state]}"
        if (( gitstate[total] > 1 )); then
            state+=" (${gitstate[step]}/${gitstate[total]})"
        fi
        segments+=( "orange:${state}" )
        if [[ -n ${gitstate[target_name]} ]]; then
            segments+=( "orange:${gitstate[target_name]}" )
        fi
    fi

    local _status=()
    (( gitstate[ahead]       )) && _status+=( "${gitstate[ahead]}" )
    (( gitstate[behind]      )) && _status+=( "${gitstate[behind]}" )
    (( gitstate[unmerged]    )) && _status+=( "${gitstate[unmerged]}" )
    (( gitstate[staged]      )) && _status+=( "${gitstate[staged]}" )
    (( gitstate[wt_modified] )) && _status+=( "${gitstate[wt_modified]}" )
    (( gitstate[wt_deleted]  )) && _status+=( "${gitstate[wt_deleted]}" )
    (( gitstate[untracked]   )) && _status+=( "${gitstate[untracked]}" )
    (( gitstate[stash]       )) && _status+=( "${gitstate[stash]}" )
    if (( ${#_status} > 0 )); then
        segments+=( "yellow:${(j: :)_status}" )
    fi

    powerprompt -f zsh -R -- "${segments[@]}"
    return 0
}

_rprompt_callback() {
    local returncode=${argv[2]}
    local stdout=${argv[3]}

    (( returncode != 0 )) && return ${returncode}
    RPROMPT=${stdout}
    zle reset-prompt
}

_prompt_destroy() {
    async_stop_worker rprompt_worker
    add-zsh-hook -d precmd _rprompt
}

_PROMPT_FUNCTION=_prompt_function
_PROMPT_DESTROY=_prompt_destroy

async_start_worker rprompt_worker -u || return 1
async_register_callback rprompt_worker _rprompt_callback || return 1
add-zsh-hook -Uz precmd _rprompt || return 1

return 0
