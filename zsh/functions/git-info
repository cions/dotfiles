#autoload

emulate -L zsh

typeset -gA gitstate
local gitdir grevparse gstatus tmp

gitdir="$(git rev-parse --absolute-git-dir 2>/dev/null)" || return 1
grevparse=( "${(@f)$(git rev-parse \
    --is-inside-work-tree \
    --is-inside-git-dir \
    --is-bare-repository \
    --is-shallow-repository \
    --show-prefix \
    --show-toplevel)}" )
gstatus=( "${(@f)$(git status --porcelain=v1 2>/dev/null)}" )

gitstate[gitdir]=${gitdir}
gitstate[inworktree]=${${${grevparse[1]:#true}:+0}:-1}
gitstate[ingitdir]=${${${grevparse[2]:#true}:+0}:-1}
gitstate[isbare]=${${${grevparse[3]:#true}:+0}:-1}
gitstate[isshallow]=${${${grevparse[4]:#true}:+0}:-1}
gitstate[prefix]=${grevparse[5]}
gitstate[root]=${grevparse[6]}
gitstate[name]=${grevparse[6]:t}

if [[ -f ${gitdir}/MERGE_HEAD ]] {
    gitstate[state]="merge"
    gitstate[target_oid]="$(git rev-parse MERGE_HEAD)"
} elif [[ -d ${gitdir}/rebase-apply ]] {
    if [[ -f ${gitdir}/rebase-apply/applying ]] {
        gitstate[state]="am"
    } else {
        gitstate[state]="rebase"
        gitstate[head_oid]="$(<${gitdir}/rebase-apply/orig-head)"
        gitstate[head_fullname]="$(<${gitdir}/rebase-apply/head-name)"
        if [[ ${gitstate[head_fullname]} == "detached HEAD" ]] {
            gitstate[head_detached]=1
        }
        gitstate[target_oid]="$(<${gitdir}/rebase-apply/onto)"
    }
    gitstate[step]="$(<${gitdir}/rebase-apply/next)"
    gitstate[total]="$(<${gitdir}/rebase-apply/last)"
} elif [[ -d ${gitdir}/rebase-merge ]] {
    if [[ -f ${gitdir}/rebase-merge/interactive ]] {
        gitstate[state]="rebase-i"
    } else {
        gitstate[state]="rebase-m"
    }
    gitstate[head_oid]="$(<${gitdir}/rebase-merge/orig-head)"
    gitstate[head_fullname]="$(<${gitdir}/rebase-merge/head-name)"
    if [[ ${gitstate[head_fullname]} == "detached HEAD" ]] {
        gitstate[head_detached]=1
    }
    gitstate[target_oid]="$(<${gitdir}/rebase-merge/onto)"
    gitstate[step]="$(<${gitdir}/rebase-merge/msgnum)"
    gitstate[total]="$(<${gitdir}/rebase-merge/end)"
} elif [[ -f ${gitdir}/CHERRY_PICK_HEAD ]] {
    gitstate[state]="cherry-pick"
    gitstate[target_oid]="$(git rev-parse CHERRY_PICK_HEAD)"
    if [[ -f ${gitdir}/sequencer/todo ]] {
        tmp="$(git rev-list --count sequencer/head..HEAD)"
        gitstate[step]=$(( tmp + 1 ))
        gitstate[total]=$(( tmp + "$(grep -cv '^#' ${gitdir}/sequencer/todo)" ))
    } else {
        gitstate[step]=1
        gitstate[total]=1
    }
} elif [[ -f ${gitdir}/REVERT_HEAD ]] {
    gitstate[state]="revert"
    gitstate[target_oid]="$(git rev-parse REVERT_HEAD)"
    if [[ -f ${gitdir}/sequencer/todo ]] {
        tmp="$(git rev-list --count sequencer/head..HEAD)"
        gitstate[step]=$(( tmp + 1 ))
        gitstate[total]=$(( tmp + "$(grep -cv '^#' ${gitdir}/sequencer/todo)" ))
    } else {
        gitstate[step]=1
        gitstate[total]=1
    }
} elif [[ -f ${gitdir}/BISECT_LOG ]] {
    gitstate[state]="bisect"
    tmp="$(git rev-list --bisect --bisect-vars 2>/dev/null)"
    if [[ -n "${tmp}" ]] {
        gitstate[step]="$(grep -cv '^#' ${gitdir}/BISECT_LOG)"
        gitstate[total]=$(( gitstate[step] + ${tmp[(fr)bisect_steps=*]#*=} ))
    }
} else {
    gitstate[state]=""
}

if (( ! ${+gitstate[head_oid]} )) {
    if tmp="$(git symbolic-ref --quiet HEAD)"; then
        gitstate[head_fullname]=${tmp}
        gitstate[head_name]="$(git symbolic-ref --short HEAD)"
        if ! gitstate[head_oid]="$(git rev-parse --quiet --verify HEAD)"; then
            gitstate[head_initial]=1
        fi
    else
        gitstate[head_detached]=1
        gitstate[head_oid]="$(git rev-parse HEAD)"
    fi
}
: ${gitstate[head_detached]:=0}
: ${gitstate[head_initial]:=0}

if (( ${+gitstate[head_oid]} )) {
    gitstate[head_abbrev]="$(git rev-parse --short ${gitstate[head_oid]})"
}

if (( ${gitstate[head_detached]} )) {
    gitstate[head_name]="$(git name-rev --name-only --no-undefined --always --exclude='refs/bisect/*' ${gitstate[head_oid]})"
    gitstate[head_fullname]="$(git rev-parse --symbolic-full-name ${gitstate[head_name]})"
    : ${gitstate[head_fullname]:=${gitstate[head_oid]}}
} else {
    if (( ! ${+gitstate[head_name]} )) {
        gitstate[head_name]="$(git rev-parse --abbrev-ref=strict ${gitstate[head_fullname]})"
    }
    if (( ! ${gitstate[head_initial]} )) {
        if tmp="$(git rev-list --count --left-right ${gitstate[head_fullname]}@{u}...${gitstate[head_fullname]} 2>/dev/null)"; then
            gitstate[ahead]=${tmp[(w)2]}
            gitstate[behind]=${tmp[(w)1]}
        fi
    }
}

if (( ${+gitstate[target_oid]} )) {
    gitstate[target_abbrev]="$(git rev-parse --short ${gitstate[target_oid]})"
    gitstate[target_name]="$(git name-rev --name-only --no-undefined --always --exclude='refs/bisect/*' ${gitstate[target_oid]})"
    gitstate[target_fullname]="$(git rev-parse --symbolic-full-name ${gitstate[target_name]})"
    : ${gitstate[target_fullname]:=${gitstate[target_oid]}}
}

: ${gitstate[step]:=0}
: ${gitstate[total]:=0}
: ${gitstate[ahead]:=0}
: ${gitstate[behind]:=0}

gitstate[untracked]=${(M)#gstatus:#\?\? *}
gitstate[wt_modified]=${(M)#gstatus:#([ MARC]M| A) *}
gitstate[wt_deleted]=${(M)#gstatus:#[ MARC]D *}
gitstate[unstaged]=${(M)#gstatus:#([ MARC][MD]| A) *}
gitstate[modified]=${(M)#gstatus:#M[ MD] *}
gitstate[added]=${(M)#gstatus:#A[ MD] *}
gitstate[deleted]=${(M)#gstatus:#D[ M] *}
gitstate[renamed]=${(M)#gstatus:#R[ MD] *}
gitstate[copied]=${(M)#gstatus:#C[ MD] *}
gitstate[staged]=${(M)#gstatus:#([MARC][ MD]|D[ M]) *}
gitstate[unmerged]=${(M)#gstatus:#(U[ADU]|A[AU]|D[DU]) *}
gitstate[stash]="$(git stash list --oneline 2>/dev/null | wc -l)"

return 0
