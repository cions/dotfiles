#!/bin/zsh

zmodload zsh/terminfo
zmodload zsh/zutil

typeset -A colorscheme
if (( terminfo[colors] >= 256 )); then
    colorscheme=(
        red     235:203
        orange  235:216
        yellow  235:227
        green   235:156
        cyan    235:117
        blue    235:111
        purple  235:170
        magenta 235:207
        black   252:235
        gray1   252:238
        gray2   252:242
        gray3   255:245
        gray4   238:248
        white   235:252
    )
else
    colorscheme=(
        red     0:1
        orange  0:1
        yellow  0:3
        green   0:2
        cyan    0:6
        blue    7:4
        purple  0:5
        magenta 0:5
        black   7:0
        gray1   7:0
        gray2   7:0
        gray3   0:7
        gray4   0:7
        white   0:7
    )
fi

usage() {
    cat >&2 <<'EOF'
usage: powerprompt [-f FORMAT] [-nPLR] color:text...
       powerprompt [-C] -l

options:
 -f FORMAT              character sequence format for styling
                        (available: ansi, zsh, bash tmux)
 -l                     list available colors and exit
 -n                     do not add spaces at both ends of the field
 -C                     do not colorize for -l
 -P                     do not use Powerline symbols as separators
 -L                     generate left-side prompt
 -R                     generate right-side prompt
EOF
    exit 1
}

list_colors() {
    local colors color nocolor
    nocolor=${argv[1]}

    for color in ${(ko)colorscheme}; do
        if (( nocolor )); then
            print -rl -- ${color}
        else
            colors=( ${(s.:.)colorscheme[${color}]} )
            print -P "%F{${colors[1]}}%K{${colors[2]}} ${color} %f%k"
        fi
    done
    exit 0
}

zparseopts -D -M -A opts -- h=-help -help f: l n C P L R || exit 1

(( ${+opts[--help]} )) && usage
(( ${+opts[-l]} )) && list_colors ${+opts[-C]}

format=${opts[-f]:-ansi}
nospace=${+opts[-n]}
direction=${${opts[-R]+right}:-left}
if (( ${+opts[-P]} )); then
    separators=("" "" "" "")
else
    separators=($'\uE0B0' $'\uE0B1' $'\uE0B2' $'\uE0B3')
fi

case ${format} in
    (ansi)
        setaf() { print -nrP "%F{$1}" }
        setab() { print -nrP "%K{$1}" }
        reset() { print -nrP "%f%k" }
        ;;
    (zsh)
        setaf() { print -nrP "%%F{$1}" }
        setab() { print -nrP "%%K{$1}" }
        reset() { print -nrP "%%f%%k" }
        ;;
    (bash)
        setaf() { print -nrP "\[%F{$1}\]" }
        setab() { print -nrP "\[%K{$1}\]" }
        reset() { print -nrP "\[%f%k\]" }
        ;;
    (tmux)
        setaf() { print -nrP "#[fg=colour$1]" }
        setab() { print -nrP "#[bg=colour$1]" }
        reset() { print -nrP "#[default]" }
        ;;
    (*)
        print -u2 "powerprompt: invalid -f: ${format}"
        exit 1
        ;;
esac

color=()
prev=()
if [[ ${direction} == left ]]; then
    reset
    for segment; do
        color=( ${(s.:.)colorscheme[${segment%%:*}]} )
        text=${segment#*:}
        (( nospace == 0 )) && [[ -z ${text} ]] && continue
        if (( ${#prev} == 0 )); then
            setaf ${color[1]}
            setab ${color[2]}
        elif [[ ${color[2]} == ${prev[2]} ]]; then
            setaf ${color[1]}
            setab ${color[2]}
            print -nr -- ${separators[2]}
        else
            setaf ${prev[2]}
            setab ${color[2]}
            print -nr -- ${separators[1]}
            setaf ${color[1]}
        fi
        if (( nospace )); then
            print -nr -- "${text}"
        else
            print -nr -- " ${text} "
        fi
        prev=( ${color} )
    done
    reset
    setaf ${prev[2]}
    print -nr -- ${separators[1]}
    reset
else
    reset
    for segment; do
        color=( ${(s.:.)colorscheme[${segment%%:*}]} )
        text=${segment#*:}
        (( nospace == 0 )) && [[ -z ${text} ]] && continue
        if [[ ${color[2]} == ${prev[2]} ]]; then
            setaf ${color[1]}
            setab ${color[2]}
            print -nr -- ${separators[4]}
        else
            setaf ${color[2]}
            print -nr -- ${separators[3]}
            setaf ${color[1]}
            setab ${color[2]}
        fi
        if (( nospace )); then
            print -nr -- "${text}"
        else
            print -nr -- " ${text} "
        fi
        prev=( ${color} )
    done
    reset
fi
