" vim: set foldmethod=marker:

set encoding=utf-8
scriptencoding utf-8
scriptversion 3

" prelude {{{1
let g:vimfiles = expand('<sfile>:p:h')

let g:cachedir = g:vimfiles .. '/.cache'
call mkdir(g:cachedir, 'p', 0700)

if exists('$TEMP')
  let g:tempdir = printf('%s/vim-%d', $TEMP, getpid())
else
  let g:tempdir = printf('/tmp/vim-%d', getpid())
endif
call mkdir(g:tempdir, 'p', 0700)

if has('vim_starting')
  call vimrc#setup_goenv(g:vimfiles .. '/.goenv')
  call vimrc#setup_ndenv(g:vimfiles .. '/.ndenv')
  call vimrc#setup_pyenv(g:vimfiles .. '/.pyenv')
  call vimrc#setup_rbenv(g:vimfiles .. '/.rbenv')
  call vimrc#setup_rsenv(g:vimfiles .. '/.rsenv')
endif

" disable default plugins {{{1
let g:loaded_2html_plugin = 1
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_netrw = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_rrhelper = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1

" dein.vim {{{1
let s:deindir = g:vimfiles .. '/dein'
let s:deinrepo = s:deindir .. '/repos/github.com/Shougo/dein.vim'

if has('vim_starting')
  if !isdirectory(s:deinrepo)
    call vimrc#await(vimrc#setup_dein(s:deinrepo))
  endif
  let &runtimepath = s:deinrepo .. ',' .. &runtimepath
endif

let g:dein#types#git#clone_depth = 1
let g:dein#types#git#pull_command = 'fetch --depth=1 && git reset --merge "@{upstream}"'

if dein#load_state(s:deindir)
  let s:tomls = glob(g:vimfiles .. '/*.toml', 0, 1)
  let s:vimrcs = [$MYVIMRC] + s:tomls

  call dein#begin(s:deindir, s:vimrcs)
  for s:toml in s:tomls
    call dein#load_toml(s:toml)
  endfor
  for s:dir in glob('~/src/*/cions', 0, 1)
    call dein#local(s:dir, { 'frozen': 1, 'merged': 0 }, ['vim-*', '*.vim'])
  endfor
  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

call dein#call_hook('source')
if has('vim_starting')
  autocmd VimEnter * ++once call dein#call_hook('post_source')
else
  call dein#call_hook('post_source')
endif

syntax enable
filetype plugin indent on

" options {{{1
set hidden
set mouse=a
set ttimeout
set ttimeoutlen=100
set shelltemp
set splitbelow
set splitright

set showtabline=2
set laststatus=2
set statusline=%F\ %y[%{&fenc?&fenc:&enc}:%{&ff}]%m%r%w%=(%l,%c)
set shortmess+=cmrFI
set belloff=all
set noruler
set noshowcmd
set noshowmode
set notitle

set scrolloff=3
set sidescroll=1
set sidescrolloff=1
set backspace=indent,eol,start
set virtualedit=block
set complete=.,i,d,t
set completeopt=menu
set pumheight=0
set matchpairs& matchpairs+=<:>
set nojoinspaces
set nrformats=bin,hex
set smarttab
set shiftround
set autoindent
set smartindent

set history=200
set cedit=<C-Q>
set wildmenu
set wildmode=longest:full,full
set suffixes& suffixes-=.h

set wrap
set linebreak
set breakindent
set breakindentopt=min:35,sbr
set showbreak=>\ 
set list
set listchars=tab:>-,trail:-,extends:>,precedes:<
set display=truncate,uhex
set conceallevel=0
set lazyredraw
set hlsearch
set highlight& highlight+=@:SpecialKey

set path=.,,
set noincsearch
set ignorecase
set smartcase

let &backupdir = '.,' .. g:tempdir
let &directory = g:cachedir
set writebackup
set nobackup
set viminfo=
set viminfofile=NONE

if has('gui_running')
  set background=light
  set guioptions=abefiMg
  set iminsert=0
  set imsearch=0
  if has('gui_gtk3')
    set guifont=Monospace\ 12
  elseif has('gui_win32')
    set guifont=MiG_Mono:h12:cSHIFTJIS:qDRAFT
  endif
  if has('directx')
    set renderoptions=type:directx
  endif
else
  set background=dark
endif
colorscheme solarized

language messages en_US.UTF-8
set helplang=en,ja

if &term ==# 'win32'
  set termencoding=cp932
else
  set termencoding=utf-8
endif
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,euc-jisx0213,cp932
set fileformats=unix,dos

if executable('ag')
  set grepprg=ag\ --nocolor\ --nogroup\ --column\ --follow
  set grepformat=%f:%l:%c:%m
else
  set grepprg=internal
endif

" key bindings {{{1
noremap s <Nop>
noremap S <Nop>
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
nnoremap Y y$
nnoremap x "_x
nnoremap j gj
nnoremap k gk
nnoremap 0 g0
nnoremap ^ g^
nnoremap gj j
nnoremap gk k
nnoremap g0 0
nnoremap g^ ^
xnoremap < <gv
xnoremap > >gv

inoremap <C-a> <C-o>^
inoremap <C-f> <C-o>w
inoremap <C-b> <C-o>b
inoremap <expr> <C-e> pumvisible() ? asyncomplete#cancel_popup() : "\<C-o>$"
inoremap <expr> <C-y> pumvisible() ? asyncomplete#close_popup() : "\<C-y>"

map <MiddleMouse> <Nop>
map <2-MiddleMouse> <Nop>
map <3-MiddleMouse> <Nop>
map <4-MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>
imap <2-MiddleMouse> <Nop>
imap <3-MiddleMouse> <Nop>
imap <4-MiddleMouse> <Nop>

nnoremap <S-Left> <C-w><LT><CR>
nnoremap <S-Right> <C-w>><CR>
nnoremap <S-Up> <C-w>+<CR>
nnoremap <S-Down> <C-w>-<CR>

nnoremap <silent> gh :<C-u>nohlsearch<CR>
nnoremap <silent> <Leader>n :<C-u>set number!<CR>
nnoremap <silent> <Leader>N :<C-u>set relativenumber!<CR>
nnoremap <silent> <Leader>w :<C-u>set wrap! wrap?<CR>
nnoremap <silent> <C-l> <C-l>:<C-u>call lightline#update()<CR>

map _ <Plug>(operator-replace)
map sl <Plug>(operator-reverse-lines)
map sw <Plug>(operator-reverse-text)
map gc <Plug>(caw:prefix)
map gci <Plug>(caw:hatpos:comment)
nmap gcd <Plug>(textmanip-duplicate-up)<Plug>(caw:hatpos:comment)+
xmap gcd <Plug>(textmanip-duplicate-up)gv<Plug>(caw:hatpos:comment)'>+
map [e <Plug>(edgemotion-k)
map ]e <Plug>(edgemotion-j)
map * <Plug>(asterisk-z*)
map # <Plug>(asterisk-z#)
map g* <Plug>(asterisk-gz*)
map g# <Plug>(asterisk-gz#)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>d <Plug>(textmanip-duplicate-down)<Esc>
nmap <Space>D <Plug>(textmanip-duplicate-up)
xmap <Space>D <Plug>(textmanip-duplicate-up)<Esc>
xmap <Space>h <Plug>(textmanip-duplicate-left)<Esc>
xmap <Space>l <Plug>(textmanip-duplicate-right)<Esc>
xmap H <Plug>(textmanip-move-left)
xmap J <Plug>(textmanip-move-down)
xmap K <Plug>(textmanip-move-up)
xmap L <Plug>(textmanip-move-right)

cnoremap <C-A> <Home>
cnoremap <C-B> <Left>
cnoremap <C-F> <Right>

tnoremap <C-W>gT <C-W>:tabprev<CR>
tnoremap <C-W>gt <C-W>:tabnext<CR>
tnoremap <silent> <C-W><C-h> <C-W>:call job_stop(term_getjob(bufnr('%')), 'hup')<CR>
tnoremap <C-W><Esc> <C-W>N

" commands {{{1
command! Update call vimrc#update()
command! Clean call vimrc#clean()
command! SynStack call vimrc#synstack()
command! Highlight call vimrc#highlight()

" autocmd {{{1
augroup vimrc
  autocmd!
  autocmd VimLeave * call delete(g:tempdir, 'rf')
  autocmd BufEnter ?* call vimrc#lcd_to_project_dir(expand('<afile>:p'))
  autocmd BufWritePre * call vimrc#auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
  autocmd BufWritePost,BufFilePost * ++nested filetype detect
  autocmd BufWritePost vimrc,.vimrc,*.vim,*.toml ++nested source $MYVIMRC
augroup END

